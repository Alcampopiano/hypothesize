{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hypothesize: robust statistics in Python Hypothesize is a robust statistics library for Python based on Rand R. Wilcox's R package WRS . With Hypothesize you can compare groups and measure associations using methods that outperform traditional statistcal approaches in terms of power and accuracy. For more information on robust methods please see Wilcox's book Introduction to Robust Estimation and Hypothesis Testing . Getting Started Overview Installation Dependencies Basic Usage Installation This is how to install doc tools alerts A simple primary alert\u2014check it out! A simple info alert\u2014check it out! code def my_func(): i=1 print('hello_world') admonition optional explicit title within double quotes Any number of other indented markdown elements. def my_func(hello='world'): for item in my_list: print(item, 12) button this is a link-button this is a block link-button","title":"Home"},{"location":"#hypothesize-robust-statistics-in-python","text":"Hypothesize is a robust statistics library for Python based on Rand R. Wilcox's R package WRS . With Hypothesize you can compare groups and measure associations using methods that outperform traditional statistcal approaches in terms of power and accuracy. For more information on robust methods please see Wilcox's book Introduction to Robust Estimation and Hypothesis Testing .","title":"Hypothesize: robust statistics in Python"},{"location":"#getting-started","text":"Overview Installation Dependencies Basic Usage","title":"Getting Started"},{"location":"#installation","text":"This is how to install","title":"Installation"},{"location":"#doc-tools","text":"alerts A simple primary alert\u2014check it out! A simple info alert\u2014check it out! code def my_func(): i=1 print('hello_world') admonition optional explicit title within double quotes Any number of other indented markdown elements. def my_func(hello='world'): for item in my_list: print(item, 12) button this is a link-button this is a block link-button","title":"doc tools"},{"location":"about/","text":"Release Notes Coming soon Contributing How to contribute to hypothesize License (BSD-3) Copyright (c) 2020, Allan Campopiano. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of hypothesize nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"About"},{"location":"about/#release-notes","text":"Coming soon","title":"Release Notes"},{"location":"about/#contributing","text":"How to contribute to hypothesize","title":"Contributing"},{"location":"about/#license-bsd-3","text":"Copyright (c) 2020, Allan Campopiano. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of hypothesize nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License (BSD-3)"},{"location":"overview/","text":"Overview The benefits of using robust methods for hypothesis testing have been known for the last half century. They have been shown to subtatially increase power and accuracy when compared to traditional approaches. The issues of robustness and the functions in this library are described in detail in Rand R. Wilcox's book Introduction to Robust Estimation and Hypothesis Testing . The Hypothesize API Hypothesize's API is friendly and consistent, making it easy for you to discover and use robust functions that are appropriate for your statistical design. Package structure Hypothesize uses it's package stucture to guide you to the appropriate function based on your statistical design. The following simplified chart shows how Hypothesize organizes its functions: graph TB linkStyle default interpolate basis A[Hypothesize] A --> B(compare groups with single factor) A --> C(compare groups with two factors) A --> D(measure associations) B --> F(f<sub>1</sub>) B --> G(f<sub>2</sub>) B --- H(f<sub>n</sub>) C --> F1(f<sub>1</sub>) C --> G2(f<sub>2</sub>) C --> H3(f<sub>n</sub>) D --> F5(f<sub>1</sub>) D --> G6(f<sub>2</sub>) D --> H7(f<sub>n</sub>) This is hierarcy is reflected in the autocomplete as follows: Getting your data into Hypothesize In Hypothesize, input data are always specified as a Pandas DataFrame or Series. For example, if you have a 2x3 factorial design, your data would take the form of a six-column DataFrame (i.e., J levels x K levels). Using Pandas you can read your data into Python and use one of the appropriate functions from Hypothesize as follows: \"What about my column names\", you ask? Don't worry, Hypothesize doesn't make use of your column names. Feel free to name them however you like! import pandas as pd df=pd.read_csv('my_data.csv') df.head() cell_1_1 cell_1_2 cell_1_3 cell_2_1 cell_2_2 cell_2_3 0 0.04 0.90 0.79 0.51 0.33 0.23 1 0.76 0.29 0.84 0.03 0.5 0.73 2 0.71 0.59 0.11 0.89 0.76 0.04 3 0.17 0.26 0.88 0.28 0.1 0.21 4 0.95 0.22 0.83 0.59 0.65 0.20 from hypothesize.compare_groups_with_two_factors import bwmcp results=bwmcp(J=2, K=3, x=df) The results are returned as a Python Dictionary containing simple Python objects or DataFrames (when the results are best given as a matrix). For example, here are the previously computed results for the interaction returned as a DataFrame. results['factor_AB'] con_num psihat se test crit_value p_value 0 0 -0.100698 0.126135 -0.798336 2.3771 0.410684 1 1 -0.037972 0.151841 -0.250078 2.3771 0.804674 2 2 0.0627261 0.135392 0.463291 2.3771 0.659432 Try this example yourself in Colab!","title":"Overview"},{"location":"overview/#overview","text":"The benefits of using robust methods for hypothesis testing have been known for the last half century. They have been shown to subtatially increase power and accuracy when compared to traditional approaches. The issues of robustness and the functions in this library are described in detail in Rand R. Wilcox's book Introduction to Robust Estimation and Hypothesis Testing .","title":"Overview"},{"location":"overview/#the-hypothesize-api","text":"Hypothesize's API is friendly and consistent, making it easy for you to discover and use robust functions that are appropriate for your statistical design.","title":"The Hypothesize API"},{"location":"overview/#package-structure","text":"Hypothesize uses it's package stucture to guide you to the appropriate function based on your statistical design. The following simplified chart shows how Hypothesize organizes its functions: graph TB linkStyle default interpolate basis A[Hypothesize] A --> B(compare groups with single factor) A --> C(compare groups with two factors) A --> D(measure associations) B --> F(f<sub>1</sub>) B --> G(f<sub>2</sub>) B --- H(f<sub>n</sub>) C --> F1(f<sub>1</sub>) C --> G2(f<sub>2</sub>) C --> H3(f<sub>n</sub>) D --> F5(f<sub>1</sub>) D --> G6(f<sub>2</sub>) D --> H7(f<sub>n</sub>) This is hierarcy is reflected in the autocomplete as follows:","title":"Package structure"},{"location":"overview/#getting-your-data-into-hypothesize","text":"In Hypothesize, input data are always specified as a Pandas DataFrame or Series. For example, if you have a 2x3 factorial design, your data would take the form of a six-column DataFrame (i.e., J levels x K levels). Using Pandas you can read your data into Python and use one of the appropriate functions from Hypothesize as follows: \"What about my column names\", you ask? Don't worry, Hypothesize doesn't make use of your column names. Feel free to name them however you like! import pandas as pd df=pd.read_csv('my_data.csv') df.head() cell_1_1 cell_1_2 cell_1_3 cell_2_1 cell_2_2 cell_2_3 0 0.04 0.90 0.79 0.51 0.33 0.23 1 0.76 0.29 0.84 0.03 0.5 0.73 2 0.71 0.59 0.11 0.89 0.76 0.04 3 0.17 0.26 0.88 0.28 0.1 0.21 4 0.95 0.22 0.83 0.59 0.65 0.20 from hypothesize.compare_groups_with_two_factors import bwmcp results=bwmcp(J=2, K=3, x=df) The results are returned as a Python Dictionary containing simple Python objects or DataFrames (when the results are best given as a matrix). For example, here are the previously computed results for the interaction returned as a DataFrame. results['factor_AB'] con_num psihat se test crit_value p_value 0 0 -0.100698 0.126135 -0.798336 2.3771 0.410684 1 1 -0.037972 0.151841 -0.250078 2.3771 0.804674 2 2 0.0627261 0.135392 0.463291 2.3771 0.659432 Try this example yourself in Colab!","title":"Getting your data into Hypothesize"}]}